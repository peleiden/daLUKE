#!/usr/bin/env python3
import os

import torch
from pelutils import log, Levels, Parser

from daluke.collect_modelfile import OUT_FILE
from daluke.model import load_from_archive, DaLukeNER
from daluke import cuda

ARGUMENTS = {
    "modelfile": {
        "help": ".tar.gz file containing the model, metadata and entity vocab generated by collect_modelfile",
        "default": os.path.join("local_data", OUT_FILE),
    },
    "quieter": {"help": "Don't show debug logging", "action": "store_true"},
    "cpu":     {"help": "Run experiment on cpu",    "action": "store_true"},
}

def run_experiment(args: dict[str, str]):
    device = torch.device("cpu") if args["cpu"] else cuda
    entity_vocab, metadata, state_dict = load_from_archive(args["modelfile"])

    log.debug("Loading model ...")
    model = DaLukeNER(metadata["model_config"])
    model.load_state_dict(state_dict, strict=False)
    model.to(device)

if __name__ == '__main__':
    with log.log_errors:
        parser = Parser(ARGUMENTS, name="daLUKE NER fine-tuning", multiple_jobs=True)
        experiments = parser.parse()
        log.configure(
            os.path.join(parser.location, "daluke_ner.log"), "Finetune daLUKE for Danish NER",
            print_level=Levels.INFO if experiments[0]["quieter"] else Levels.DEBUG
        )
        for exp in experiments:
            run_experiment(exp)
